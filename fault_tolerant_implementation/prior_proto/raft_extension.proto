// raft_extension.proto
syntax = "proto3";

package messaging;

// RaftService provides RPCs for the Raft consensus protocol
service RaftService {
  // RequestVote is invoked by candidates to gather votes
  rpc RequestVote(RequestVoteRequest) returns (RequestVoteResponse);
  
  // AppendEntries is invoked by the leader to replicate log entries and as heartbeat
  rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResponse);
}

// RequestVoteRequest is sent by candidates to gather votes
message RequestVoteRequest {
  uint64 term = 1;            // candidate's term
  string candidate_id = 2;    // candidate requesting vote
  int64 last_log_index = 3;   // index of candidate's last log entry
  uint64 last_log_term = 4;   // term of candidate's last log entry
}

// RequestVoteResponse is the response to a vote request
message RequestVoteResponse {
  uint64 term = 1;            // current term, for candidate to update itself
  bool vote_granted = 2;      // true if vote was granted
}

// LogEntry represents a single entry in the Raft log
message LogEntry {
  uint64 term = 1;            // term when entry was created
  string command = 2;         // command (serialized as JSON)
}

// AppendEntriesRequest is sent by the leader to replicate log entries
message AppendEntriesRequest {
  uint64 term = 1;            // leader's term
  string leader_id = 2;       // leader's ID so followers can redirect clients
  int64 prev_log_index = 3;   // index of log entry preceding new ones
  uint64 prev_log_term = 4;   // term of prev_log_index entry
  repeated LogEntry entries = 5; // log entries to store (empty for heartbeat)
  int64 leader_commit = 6;    // leader's commit index
}

// AppendEntriesResponse is the response to an AppendEntries request
message AppendEntriesResponse {
  uint64 term = 1;            // current term, for leader to update itself
  bool success = 2;           // true if follower contained entry matching prev_log_index and prev_log_term
}
