# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import exp_pb2 as exp__pb2

GRPC_GENERATED_VERSION = '1.70.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in exp_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class MessagingServiceStub(object):
    """--------------------------------------------------------------------
    Service definition
    --------------------------------------------------------------------
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateAccount = channel.unary_unary(
                '/messaging.MessagingService/CreateAccount',
                request_serializer=exp__pb2.CreateAccountRequest.SerializeToString,
                response_deserializer=exp__pb2.CreateAccountResponse.FromString,
                _registered_method=True)
        self.Login = channel.unary_unary(
                '/messaging.MessagingService/Login',
                request_serializer=exp__pb2.LoginRequest.SerializeToString,
                response_deserializer=exp__pb2.LoginResponse.FromString,
                _registered_method=True)
        self.ListAccounts = channel.unary_unary(
                '/messaging.MessagingService/ListAccounts',
                request_serializer=exp__pb2.ListAccountsRequest.SerializeToString,
                response_deserializer=exp__pb2.ListAccountsResponse.FromString,
                _registered_method=True)
        self.DisplayConversation = channel.unary_unary(
                '/messaging.MessagingService/DisplayConversation',
                request_serializer=exp__pb2.DisplayConversationRequest.SerializeToString,
                response_deserializer=exp__pb2.DisplayConversationResponse.FromString,
                _registered_method=True)
        self.SendMessage = channel.unary_unary(
                '/messaging.MessagingService/SendMessage',
                request_serializer=exp__pb2.SendMessageRequest.SerializeToString,
                response_deserializer=exp__pb2.SendMessageResponse.FromString,
                _registered_method=True)
        self.ReadMessages = channel.unary_unary(
                '/messaging.MessagingService/ReadMessages',
                request_serializer=exp__pb2.ReadMessagesRequest.SerializeToString,
                response_deserializer=exp__pb2.ReadMessagesResponse.FromString,
                _registered_method=True)
        self.DeleteMessage = channel.unary_unary(
                '/messaging.MessagingService/DeleteMessage',
                request_serializer=exp__pb2.DeleteMessageRequest.SerializeToString,
                response_deserializer=exp__pb2.DeleteMessageResponse.FromString,
                _registered_method=True)
        self.DeleteAccount = channel.unary_unary(
                '/messaging.MessagingService/DeleteAccount',
                request_serializer=exp__pb2.DeleteAccountRequest.SerializeToString,
                response_deserializer=exp__pb2.DeleteAccountResponse.FromString,
                _registered_method=True)
        self.GetUnreadMessages = channel.unary_unary(
                '/messaging.MessagingService/GetUnreadMessages',
                request_serializer=exp__pb2.GetUnreadMessagesRequest.SerializeToString,
                response_deserializer=exp__pb2.GetUnreadMessagesResponse.FromString,
                _registered_method=True)
        self.GetMessageInformation = channel.unary_unary(
                '/messaging.MessagingService/GetMessageInformation',
                request_serializer=exp__pb2.GetMessageInformationRequest.SerializeToString,
                response_deserializer=exp__pb2.GetMessageInformationResponse.FromString,
                _registered_method=True)
        self.GetUsernameByID = channel.unary_unary(
                '/messaging.MessagingService/GetUsernameByID',
                request_serializer=exp__pb2.GetUsernameByIDRequest.SerializeToString,
                response_deserializer=exp__pb2.GetUsernameByIDResponse.FromString,
                _registered_method=True)
        self.MarkMessageAsRead = channel.unary_unary(
                '/messaging.MessagingService/MarkMessageAsRead',
                request_serializer=exp__pb2.MarkMessageAsReadRequest.SerializeToString,
                response_deserializer=exp__pb2.MarkMessageAsReadResponse.FromString,
                _registered_method=True)
        self.GetUserByUsername = channel.unary_unary(
                '/messaging.MessagingService/GetUserByUsername',
                request_serializer=exp__pb2.GetUserByUsernameRequest.SerializeToString,
                response_deserializer=exp__pb2.GetUserByUsernameResponse.FromString,
                _registered_method=True)


class MessagingServiceServicer(object):
    """--------------------------------------------------------------------
    Service definition
    --------------------------------------------------------------------
    """

    def CreateAccount(self, request, context):
        """1) Create Account
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Login(self, request, context):
        """2) Log into Account
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListAccounts(self, request, context):
        """3) List Accounts
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DisplayConversation(self, request, context):
        """4) Display Conversation
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendMessage(self, request, context):
        """5) Send Message
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadMessages(self, request, context):
        """6) Read Messages
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteMessage(self, request, context):
        """7) Delete Message
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteAccount(self, request, context):
        """8) Delete Account
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUnreadMessages(self, request, context):
        """9) Get Unread Messages
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMessageInformation(self, request, context):
        """10) Get Message Information
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUsernameByID(self, request, context):
        """11) Get Username by ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MarkMessageAsRead(self, request, context):
        """12) Mark Message as Read
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserByUsername(self, request, context):
        """13) Get User by Username
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MessagingServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAccount,
                    request_deserializer=exp__pb2.CreateAccountRequest.FromString,
                    response_serializer=exp__pb2.CreateAccountResponse.SerializeToString,
            ),
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=exp__pb2.LoginRequest.FromString,
                    response_serializer=exp__pb2.LoginResponse.SerializeToString,
            ),
            'ListAccounts': grpc.unary_unary_rpc_method_handler(
                    servicer.ListAccounts,
                    request_deserializer=exp__pb2.ListAccountsRequest.FromString,
                    response_serializer=exp__pb2.ListAccountsResponse.SerializeToString,
            ),
            'DisplayConversation': grpc.unary_unary_rpc_method_handler(
                    servicer.DisplayConversation,
                    request_deserializer=exp__pb2.DisplayConversationRequest.FromString,
                    response_serializer=exp__pb2.DisplayConversationResponse.SerializeToString,
            ),
            'SendMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.SendMessage,
                    request_deserializer=exp__pb2.SendMessageRequest.FromString,
                    response_serializer=exp__pb2.SendMessageResponse.SerializeToString,
            ),
            'ReadMessages': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadMessages,
                    request_deserializer=exp__pb2.ReadMessagesRequest.FromString,
                    response_serializer=exp__pb2.ReadMessagesResponse.SerializeToString,
            ),
            'DeleteMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteMessage,
                    request_deserializer=exp__pb2.DeleteMessageRequest.FromString,
                    response_serializer=exp__pb2.DeleteMessageResponse.SerializeToString,
            ),
            'DeleteAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteAccount,
                    request_deserializer=exp__pb2.DeleteAccountRequest.FromString,
                    response_serializer=exp__pb2.DeleteAccountResponse.SerializeToString,
            ),
            'GetUnreadMessages': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUnreadMessages,
                    request_deserializer=exp__pb2.GetUnreadMessagesRequest.FromString,
                    response_serializer=exp__pb2.GetUnreadMessagesResponse.SerializeToString,
            ),
            'GetMessageInformation': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMessageInformation,
                    request_deserializer=exp__pb2.GetMessageInformationRequest.FromString,
                    response_serializer=exp__pb2.GetMessageInformationResponse.SerializeToString,
            ),
            'GetUsernameByID': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUsernameByID,
                    request_deserializer=exp__pb2.GetUsernameByIDRequest.FromString,
                    response_serializer=exp__pb2.GetUsernameByIDResponse.SerializeToString,
            ),
            'MarkMessageAsRead': grpc.unary_unary_rpc_method_handler(
                    servicer.MarkMessageAsRead,
                    request_deserializer=exp__pb2.MarkMessageAsReadRequest.FromString,
                    response_serializer=exp__pb2.MarkMessageAsReadResponse.SerializeToString,
            ),
            'GetUserByUsername': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserByUsername,
                    request_deserializer=exp__pb2.GetUserByUsernameRequest.FromString,
                    response_serializer=exp__pb2.GetUserByUsernameResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'messaging.MessagingService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('messaging.MessagingService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MessagingService(object):
    """--------------------------------------------------------------------
    Service definition
    --------------------------------------------------------------------
    """

    @staticmethod
    def CreateAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/messaging.MessagingService/CreateAccount',
            exp__pb2.CreateAccountRequest.SerializeToString,
            exp__pb2.CreateAccountResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/messaging.MessagingService/Login',
            exp__pb2.LoginRequest.SerializeToString,
            exp__pb2.LoginResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListAccounts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/messaging.MessagingService/ListAccounts',
            exp__pb2.ListAccountsRequest.SerializeToString,
            exp__pb2.ListAccountsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DisplayConversation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/messaging.MessagingService/DisplayConversation',
            exp__pb2.DisplayConversationRequest.SerializeToString,
            exp__pb2.DisplayConversationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/messaging.MessagingService/SendMessage',
            exp__pb2.SendMessageRequest.SerializeToString,
            exp__pb2.SendMessageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReadMessages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/messaging.MessagingService/ReadMessages',
            exp__pb2.ReadMessagesRequest.SerializeToString,
            exp__pb2.ReadMessagesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/messaging.MessagingService/DeleteMessage',
            exp__pb2.DeleteMessageRequest.SerializeToString,
            exp__pb2.DeleteMessageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/messaging.MessagingService/DeleteAccount',
            exp__pb2.DeleteAccountRequest.SerializeToString,
            exp__pb2.DeleteAccountResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUnreadMessages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/messaging.MessagingService/GetUnreadMessages',
            exp__pb2.GetUnreadMessagesRequest.SerializeToString,
            exp__pb2.GetUnreadMessagesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetMessageInformation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/messaging.MessagingService/GetMessageInformation',
            exp__pb2.GetMessageInformationRequest.SerializeToString,
            exp__pb2.GetMessageInformationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUsernameByID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/messaging.MessagingService/GetUsernameByID',
            exp__pb2.GetUsernameByIDRequest.SerializeToString,
            exp__pb2.GetUsernameByIDResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def MarkMessageAsRead(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/messaging.MessagingService/MarkMessageAsRead',
            exp__pb2.MarkMessageAsReadRequest.SerializeToString,
            exp__pb2.MarkMessageAsReadResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUserByUsername(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/messaging.MessagingService/GetUserByUsername',
            exp__pb2.GetUserByUsernameRequest.SerializeToString,
            exp__pb2.GetUserByUsernameResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class RaftServiceStub(object):
    """--------------------------------------------------------------------
    Raft Consensus Protocol
    --------------------------------------------------------------------

    RaftService provides RPCs for the Raft consensus protocol
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RequestVote = channel.unary_unary(
                '/messaging.RaftService/RequestVote',
                request_serializer=exp__pb2.RequestVoteRequest.SerializeToString,
                response_deserializer=exp__pb2.RequestVoteResponse.FromString,
                _registered_method=True)
        self.AppendEntries = channel.unary_unary(
                '/messaging.RaftService/AppendEntries',
                request_serializer=exp__pb2.AppendEntriesRequest.SerializeToString,
                response_deserializer=exp__pb2.AppendEntriesResponse.FromString,
                _registered_method=True)


class RaftServiceServicer(object):
    """--------------------------------------------------------------------
    Raft Consensus Protocol
    --------------------------------------------------------------------

    RaftService provides RPCs for the Raft consensus protocol
    """

    def RequestVote(self, request, context):
        """RequestVote is invoked by candidates to gather votes
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AppendEntries(self, request, context):
        """AppendEntries is invoked by the leader to replicate log entries and as heartbeat
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RaftServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RequestVote': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestVote,
                    request_deserializer=exp__pb2.RequestVoteRequest.FromString,
                    response_serializer=exp__pb2.RequestVoteResponse.SerializeToString,
            ),
            'AppendEntries': grpc.unary_unary_rpc_method_handler(
                    servicer.AppendEntries,
                    request_deserializer=exp__pb2.AppendEntriesRequest.FromString,
                    response_serializer=exp__pb2.AppendEntriesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'messaging.RaftService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('messaging.RaftService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class RaftService(object):
    """--------------------------------------------------------------------
    Raft Consensus Protocol
    --------------------------------------------------------------------

    RaftService provides RPCs for the Raft consensus protocol
    """

    @staticmethod
    def RequestVote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/messaging.RaftService/RequestVote',
            exp__pb2.RequestVoteRequest.SerializeToString,
            exp__pb2.RequestVoteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AppendEntries(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/messaging.RaftService/AppendEntries',
            exp__pb2.AppendEntriesRequest.SerializeToString,
            exp__pb2.AppendEntriesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
